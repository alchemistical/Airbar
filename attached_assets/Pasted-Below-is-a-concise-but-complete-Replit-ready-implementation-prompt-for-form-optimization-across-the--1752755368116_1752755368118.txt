Below is a concise but complete Replit-ready implementation prompt for form optimization across the Send Package and Add Trip flows, with a shared Location Select (countries / cities / airports) system. I‚Äôve split it into (1) goals, (2) UX principles, (3) data model for global locations, (4) shared components, (5) form field specs per flow, (6) validation & error patterns, (7) performance & accessibility notes, and (8) development task breakdown with acceptance criteria. Copy/paste into Replit (or your build tracker) and execute in order.

‚∏ª

PROJECT: Airbar Form Optimization + Global Location Select

1. Objectives
	‚Ä¢	Reduce friction + drop-off in Send Package and Add Trip onboarding forms.
	‚Ä¢	Standardize country / city / airport selection via a single, performant, searchable component.
	‚Ä¢	Auto-prefill & remember recent / favorite locations.
	‚Ä¢	Support global data scale (150+ countries) without bloating bundle (lazy load & async search).
	‚Ä¢	Enforce regulatory + weight + parcel type validation earlier to prevent downstream dispute risk.
	‚Ä¢	Align with Airbar design tokens & Refactored UI style guide.

‚∏ª

2. UX Optimization Principles

Progressive Disclosure: Ask only what‚Äôs required at each step; reveal optional / advanced inputs behind ‚ÄúShow more‚Äù.

Top-Loaded Intent: Lead each flow with origin & destination (or route/flight) because everything else depends on it.

Smart Defaults:
	‚Ä¢	Use last-used addresses/airports (per role).
	‚Ä¢	Offer ‚ÄúUse my current location‚Äù (GeoIP fallback).
	‚Ä¢	Preselect ‚ÄúEconomy carry-on‚Äù for travelers; ‚ÄúDocuments‚Äù parcel type for senders.

Inline Validation, No Walls: Validate as user tabs away; don‚Äôt block progress until submission; show progress bar.

Route Awareness: After selecting From & To, show inline chips:
	‚Ä¢	Avg reward (travelers)
	‚Ä¢	Avg savings (senders)
	‚Ä¢	Restricted items (if any)

Mobile Focus: Large touch targets; masked numeric input (weight); sticky nav for step progress.

‚∏ª

3. Global Location Data Strategy

We need countries, major cities, and primary airports (IATA). Full global datasets are large; load smart:

3.1 Data Sources (ingestion, not shipped inline)
	‚Ä¢	ISO-3166 country codes (name, code, emoji flag).
	‚Ä¢	Top ~5K cities (population > ~100k) or route-dense list. Include: id, city, admin_region(optional), country_code, lat, lng, time_zone.
	‚Ä¢	IATA airports (3-char code, airport name, city, country_code, lat/lng).
	‚Ä¢	Merge tables into a searchable index.

3.2 Normalized Schema

// Country
type Country = {
  code: string;          // "US"
  name: string;          // "United States"
  flagEmoji: string;     // "üá∫üá∏"
  currency: string;      // "USD"
  weightUnit?: "kg"|"lb"; // default measurement unit hint
};

// City
type City = {
  id: string;             // "nyc-us"
  name: string;           // "New York"
  admin?: string;         // "NY"
  countryCode: string;    // "US"
  lat: number;
  lng: number;
  tz?: string;            // "America/New_York"
  airports?: string[];    // ["JFK","LGA","EWR"]
};

// Airport
type Airport = {
  code: string;           // "JFK"
  name: string;           // "John F. Kennedy Intl"
  cityId: string;         // "nyc-us"
  countryCode: string;    // "US"
  lat: number;
  lng: number;
  isPrimary?: boolean;
};

// Lightweight result union returned to UI
type LocationResult = {
  kind: "city"|"airport"|"country";
  id: string;             // unique
  primaryLabel: string;   // "New York, NY"
  secondaryLabel?: string;// "United States"
  code?: string;          // IATA (if airport)
  countryCode: string;
  lat: number;
  lng: number;
};

3.3 Delivery Packaging
	‚Ä¢	Prebundle top 200 routes (JSON ~40KB) for instant hero suggestions.
	‚Ä¢	Lazy load regional packages (/data/locations-us.json, /locations-eu.json) on demand after first keystroke or when user country detected.
	‚Ä¢	Fallback API query /api/locations?q= for long tail.

‚∏ª

4. Shared Components

4.1 <LocationSelect />

Usage: Origin / Destination (send flow), Departure / Arrival (trip flow), Pickup / Drop-off (deliveries).

Props

type LocationSelectProps = {
  label: string;
  required?: boolean;
  placeholder?: string;
  intent?: "send" | "travel";
  scope?: "city_airport" | "airport_only" | "country_city"; // config by form step
  value?: LocationResult | null;
  onChange: (loc: LocationResult|null) => void;
  recent?: LocationResult[];
  favorites?: LocationResult[];
};

Features
	‚Ä¢	Searchable combobox w/ keyboard & typeahead.
	‚Ä¢	Grouped sections: Recent, Suggested (popular routes), Search results.
	‚Ä¢	Country flag + city + IATA code.
	‚Ä¢	GeoIP quick chip (‚ÄúUse my location: San Francisco, CA‚Äù).
	‚Ä¢	Manual entry fallback (‚ÄúCan‚Äôt find it? Enter address manually‚Äù) opens text fields saved as freeTextLocation.

Accessibility
	‚Ä¢	ARIA combobox pattern; listbox role; active descendant.

‚∏ª

4.2 <WeightInput />
	‚Ä¢	Numeric + unit toggle (kg / lb).
	‚Ä¢	Convert on change; persist user preference.

4.3 <DateRangeInput />
	‚Ä¢	Quick pick common windows (‚ÄúFlexible 7 days‚Äù, ‚ÄúExact date‚Äù).
	‚Ä¢	Supports date & time if needed.

4.4 <ParcelTypeSelector />
	‚Ä¢	Icons: Docs / Small pkg / Electronics / Apparel / Fragile / Other.
	‚Ä¢	Multi-select; maps to restrictions.

4.5 <SpaceCapacityInput /> (Traveler)
	‚Ä¢	Accepts KG + Bag count + Bag type (Carry-on / Checked / Extra item).
	‚Ä¢	Show progress bar vs airline allowance (optional advanced).

‚∏ª

5. Form Field Specs

5.1 Send Package (4 core steps)

Step 1: Route
	‚Ä¢	Origin (LocationSelect scope=city_airport)
	‚Ä¢	Destination (LocationSelect scope=city_airport)
	‚Ä¢	Package category preset? (optional quick pill)
	‚Ä¢	Continue ‚Üí Step 2

Step 2: Package Details
	‚Ä¢	Category (ParcelTypeSelector)
	‚Ä¢	Weight (WeightInput)
	‚Ä¢	Dimensions optional collapsed
	‚Ä¢	Contents description (textarea, 140 char)
	‚Ä¢	Declared value (currency by origin country)

Step 3: Pickup & Drop-off
	‚Ä¢	Pickup location (select or typed address)
	‚Ä¢	Pickup date window
	‚Ä¢	Drop-off flexibility slider (Exact / ¬±3 days / ¬±7 days)
	‚Ä¢	Sensitive / fragile toggle

Step 4: Review & Price
	‚Ä¢	Show est traveler reward range + savings %
	‚Ä¢	Edit steps inline
	‚Ä¢	CTA: Review & Pay ‚Üí escrow checkout

‚∏ª

5.2 Add Trip (5 steps)

Step 1: Flight Info
	‚Ä¢	Departure airport (LocationSelect scope=airport_only)
	‚Ä¢	Arrival airport (LocationSelect scope=airport_only)
	‚Ä¢	Departure date (required) / Return (optional)
	‚Ä¢	Airline (free text or select; optional)
	‚Ä¢	Frequent route toggle (if multi-leg? future)

Step 2: Luggage Space
	‚Ä¢	Space available (kg/lb)
	‚Ä¢	Bag type (Carry-on, Checked, Both)
	‚Ä¢	Number of bags
	‚Ä¢	Additional notes (‚ÄúCan carry only docs in backpack‚Äù)

Step 3: Acceptable Parcel Types
	‚Ä¢	Multi select categories
	‚Ä¢	Restricted items text

Step 4: Delivery Preferences
	‚Ä¢	Preferred drop-off (airport / hotel / flexible)
	‚Ä¢	Availability windows (Morning / Afternoon / Evening)
	‚Ä¢	Flexibility slider (‚ÄúTight schedule‚Äù ‚Üí ‚ÄúVery flexible‚Äù)
	‚Ä¢	Expected delivery latest date

Step 5: Review & Publish
	‚Ä¢	Collapsible summary blocks with edit icons
	‚Ä¢	Show earning estimator slider (adjust min reward threshold? later)
	‚Ä¢	Publish trip

‚∏ª

6. Validation Rules (shared)

Field	Rule	Error Copy Token
Origin/Destination	Required; must be different	err_route_same: "Origin and destination must differ."
Weight	>0; max allowed 30kg default; route may override	err_weight_max
Declared Value	numeric >=0; required if >$500 flagged for insurance	err_value_required
Dates	start <= end; cannot be past; enforce lead vs cutoff	err_date_invalid
Parcel Type	At least one selected	err_parcel_required
Luggage Space	Required; >0; convert units	err_space_required

Reg compliance hook: After route selection call /api/routes/{from}-{to}/restrictions returning banned categories; disable or warn.

‚∏ª

7. Performance & Caching
	‚Ä¢	Debounce search input 250ms.
	‚Ä¢	Cache country & city lists in IndexedDB/localStorage (versioned).
	‚Ä¢	Bundle first-screen top 20 countries inline; lazy load rest.
	‚Ä¢	SSR safe fallback list minimal.

‚∏ª

8. Development Tasks (Replit Execution Plan)

Copy from here into Replit Task Runner

TASK GROUP: Airbar Form Optimization & Global Location Select

=== PHASE 0: Setup ===
[ ] Create branch: forms/location-refactor
[ ] Install @tanstack/react-query (if not present) for async location fetch.
[ ] Add /src/data/seed/topCountries.json & /topCities.json (sample 50 entries).
[ ] Scaffold /src/lib/locationService.ts w/ search, preload, and recent history APIs.

=== PHASE 1: Shared LocationSelect ===
[ ] Create component /components/form/LocationSelect.tsx
    - Combobox w/ search input
    - Async results from locationService.search(query, scope)
    - Grouped sections: Recent, Popular, Search Results
    - Country flag + name + IATA code (if airport)
    - Manual entry fallback
    - Keyboard accessible
[ ] Add storybook demo (if storybook present)

ACCEPT: Typing ‚ÄúNew‚Äù returns New York city & JFK etc; selecting emits structured LocationResult.

=== PHASE 2: WeightInput & Units ===
[ ] /components/form/WeightInput.tsx
    - numeric input + unit toggle (kg/lb)
    - convert & persist pref in localStorage
ACCEPT: Changing unit converts value.

=== PHASE 3: ParcelTypeSelector ===
[ ] Multi-select icon grid with tooltips
[ ] Controlled component; returns string[] categories
ACCEPT: Works keyboard + screen reader.

=== PHASE 4: SendPackage Form Refactor ===
[ ] Replace current Step1 origin/destination fields with LocationSelect
[ ] Step2 integrate WeightInput, ParcelTypeSelector
[ ] Step3 pick/drop; replicate with LocationSelect (allow manual address)
[ ] Step4 summary; compute price estimate via /api/estimate or mock
[ ] Persist step state in URL search (?draftId=)

ACCEPT: User can complete all 4 steps; review shows structured summary.

=== PHASE 5: AddTrip Flow Refactor ===
[ ] Step1 use LocationSelect scope=airport_only; support multi-airport cities
[ ] Step2 luggage capacity w/ kg & bag type
[ ] Step3 parcel types
[ ] Step4 delivery prefs
[ ] Step5 summary + publish
[ ] Validate route difference & date logic

ACCEPT: Trip persists; summary shows counts; publishes to mock API.

=== PHASE 6: Recents & Favorites ===
[ ] locationService.saveRecent(role, loc)
[ ] Show recents first
[ ] ‚ÄúPin to favorites‚Äù star icon in LocationSelect
ACCEPT: Items appear under ‚ÄúRecent‚Äù on next open.

=== PHASE 7: Regulatory Hook ===
[ ] On Step2 (send) or Step3 (trip), call /api/routes/{origin.country}-{dest.country}/restrictions
[ ] Disable or warn for banned categories
ACCEPT: Selecting ‚ÄúLiquids‚Äù when banned shows inline error.

=== PHASE 8: Analytics ===
[ ] Emit events: form_step_view, form_field_error, location_search, location_select
[ ] Include role, intent, route data

=== PHASE 9: QA & Accessibility ===
[ ] Keyboard nav through combobox, checkboxes, and next/back
[ ] Screen reader labels
[ ] Color contrast tokens test

=== PHASE 10: Merge & Docs ===
[ ] Update README with LocationSelect usage
[ ] Add content/tokens for errors & labels
[ ] Open PR; attach demo video


‚∏ª

9. Sample Data Seeds (short demo list)

(Use for development only; replace w/ full ingest later.)

export const seedCountries: Country[] = [
  { code: "US", name: "United States", flagEmoji: "üá∫üá∏", currency: "USD", weightUnit: "lb" },
  { code: "GB", name: "United Kingdom", flagEmoji: "üá¨üáß", currency: "GBP", weightUnit: "kg" },
  { code: "FR", name: "France", flagEmoji: "üá´üá∑", currency: "EUR", weightUnit: "kg" },
  { code: "JP", name: "Japan", flagEmoji: "üáØüáµ", currency: "JPY", weightUnit: "kg" },
  { code: "AE", name: "United Arab Emirates", flagEmoji: "üá¶üá™", currency: "AED", weightUnit: "kg" }
];

export const seedCities: City[] = [
  { id:"nyc-us", name:"New York", admin:"NY", countryCode:"US", lat:40.7128, lng:-74.0060, airports:["JFK","LGA","EWR"] },
  { id:"lax-us", name:"Los Angeles", admin:"CA", countryCode:"US", lat:34.0522, lng:-118.2437, airports:["LAX"] },
  { id:"lon-gb", name:"London", countryCode:"GB", lat:51.5074, lng:-0.1278, airports:["LHR","LGW","LCY"] },
  { id:"par-fr", name:"Paris", countryCode:"FR", lat:48.8566, lng:2.3522, airports:["CDG","ORY"] },
  { id:"tyo-jp", name:"Tokyo", countryCode:"JP", lat:35.6762, lng:139.6503, airports:["HND","NRT"] }
];

export const seedAirports: Airport[] = [
  { code:"JFK", name:"John F. Kennedy Intl", cityId:"nyc-us", countryCode:"US", lat:40.6413, lng:-73.7781, isPrimary:true },
  { code:"LAX", name:"Los Angeles Intl", cityId:"lax-us", countryCode:"US", lat:33.9416, lng:-118.4085, isPrimary:true },
  { code:"LHR", name:"Heathrow", cityId:"lon-gb", countryCode:"GB", lat:51.4700, lng:-0.4543, isPrimary:true },
  { code:"CDG", name:"Charles de Gaulle", cityId:"par-fr", countryCode:"FR", lat:49.0097, lng:2.5479, isPrimary:true },
  { code:"HND", name:"Haneda", cityId:"tyo-jp", countryCode:"JP", lat:35.5494, lng:139.7798, isPrimary:true }
];


‚∏ª

10. Integration Touchpoints (Into Existing Flows)

Existing Route	Replace / Inject	Notes
/send-package Step1	Replace text inputs w/ <LocationSelect> x2	Prefill from query if user came from hero estimator.
/dashboard/traveler/trips/addtrip Step1	Use <LocationSelect scope=airport_only>	Filter to airports; show city fallback if none found.
Pickup / Drop-off selectors	Use <LocationSelect scope=city_airport> + manual address inline	Save favorite drop-offs.
Tracking details	Use standardized location objects to geocode map	Data contract uniform.


‚∏ª

11. Copy Tokens (Form labels & errors)

Add to src/content/tokens.forms.json:

{
  "route_from": "From",
  "route_to": "To",
  "flight_depart": "Departure Airport",
  "flight_arrive": "Arrival Airport",
  "pickup_location": "Pickup Location",
  "dropoff_location": "Drop-off Location",
  "weight_label": "Weight",
  "bag_space": "Space Available",
  "bag_count": "Number of Bags",
  "declared_value": "Declared Value",
  "err_route_required": "Please select both origin and destination.",
  "err_route_same": "Origin and destination must be different.",
  "err_weight_required": "Enter package weight.",
  "err_weight_max": "Weight exceeds allowed limit for this route.",
  "err_space_required": "Enter available luggage space.",
  "err_parcel_required": "Select at least one parcel type.",
  "err_date_invalid": "Please choose valid dates.",
  "warn_restricted": "Some parcel types are restricted on this route."
}


‚∏ª

12. Acceptance Metrics Post-Launch

Track funnel vs current baseline:
	‚Ä¢	Start ‚Üí Step1 complete rate
	‚Ä¢	Step1 ‚Üí Step2 drop-off
	‚Ä¢	Total completion time (median)
	‚Ä¢	% manual free-text locations (proxy for missing data)
	‚Ä¢	Error per field type
	‚Ä¢	Conversion to match creation

Set goals:
	‚Ä¢	Reduce Step1 exit by 25%.
	‚Ä¢	Increase full flow completion by +15%.
	‚Ä¢	<5% users forced to manual entry on top 50 routes.

‚∏ª

Ready to Build

Let me know when you want scaffolding code for:
	‚Ä¢	LocationSelect combobox
	‚Ä¢	Form step containers w/ progress
	‚Ä¢	Hook: useFormSteps (persist across reload)
	‚Ä¢	Integration into existing send/trip pages

Say: ‚ÄúGenerate LocationSelect scaffold‚Äù or ‚ÄúIntegrate into Send Package form‚Äù and I‚Äôll produce the exact TSX + Tailwind you can paste.

Ready when you are!